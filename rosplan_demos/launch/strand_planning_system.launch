<?xml version="1.0"?>
<launch>

	<!-- data paths -->
	<param name="/rosplan/data_path" value="$(find rosplan_planning_system)/planner/" />
	<param name="/rosplan/planner_path" value="$(find rosplan_planning_system)/planner/bin/" />

	<!-- domain file -->
	<param name="/rosplan/domain_path" value="$(find rosplan_planning_system)/planner/testDomain.pddl" />
	<!--<param name="/rosplan/domain_path" value="$(find rosplan_planning_system)/planner/domain.pddl" />-->

	<!-- knowledge base -->
	<node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen" />

	<!-- scene database (MongoDB) -->
	<node name="rosplan_scene_database" pkg="mongodb_store" type="mongodb_server.py" respawn="false" output="log">
		<param name="database_path" value="$(find rosplan_knowledge_base)/common/mongoDB" />
	</node>
	<node name="rosplan_scene_message_store" pkg="mongodb_store" type="message_store_node.py" respawn="false" output="log" />

	<!-- planning system -->
	<node name="rosplan_planning_system" pkg="rosplan_planning_system" type="planner" respawn="false" output="screen">
		<!-- directory for generated files -->
		<param name="data_path" value="$(find rosplan_planning_system)/planner/" />
		<param name="problem_path" value="$(find rosplan_planning_system)/planner/problem.pddl" />
		<param name="strl_file_path" value="$(find rosplan_planning_system)/planner/plan.strl" />

		<!-- to run the planner -->
		<param name="planner_command" value="timeout 10 $(find rosplan_planning_system)/planner/bin/popf -n -b DOMAIN PROBLEM" /> 
		<!-- <param name="planner_command" value="timeout 10 $(find rosplan_planning_system)/planner/bin/ff -o DOMAIN -f PROBLEM" /> -->
		<!-- <param name="planner_command" value="timeout 10 $(find rosplan_planning_system)/planner/bin/Contingent-FF -o DOMAIN -f PROBLEM"/>-->


		<param name="generate_default_problem" value="true" />
		<param name="max_dispatch_attempts" value="2" />
	</node>

	<!-- interfaces -->
      
	<!-- rpsimplemapServer : load waypoints from a file -->
	<param name="waypoint_file" value="$(find rosplan_demos)/scripts/waypoints_floor.txt" />
	<node name="rosplan_roadmap_server" pkg="rosplan_interface_mapping" type="rpsimplemapServer" respawn="false" output="screen">
		<param name="data_path" value="$(find rosplan_planning_system)/common/" />
	</node>

	<!-- goto_waypoint -->
	<node name="rosplan_interface_movebase" pkg="rosplan_interface_movebase" type="rpmovebase" respawn="false" output="screen">
		<param name="action_server" value="/move_base" />
		<param name="pddl_action_name" value="goto_waypoint" />
	</node>


	<!-- enter_elevator -->
	<node name="rosplan_interface_enterelevator" pkg="rosplan_interface_enterelevator" type="rpenterelevator" respawn="false" output="screen">
		<param name="pddl_action_name" value="enter_elevator" />
	</node>


	<!-- change_map -->
	<node name="rosplan_interface_changemap" pkg="rosplan_interface_changemap" type="rpchangemap" respawn="false" output="screen">
		<param name="pddl_action_name" value="change_map" />
	</node>


	<!-- exit_elevator -->
	<node name="rosplan_interface_exitelevator" pkg="rosplan_interface_exitelevator" type="rpexitelevator" respawn="false" output="screen">
		<param name="pddl_action_name" value="exit_elevator" />
	</node>


	<!-- person_interaction -->
	<node name="rosplan_interface_personinteraction" pkg="rosplan_interface_personinteraction" type="rppersoninteraction" respawn="false" output="screen">
	<param name="turtlebot_name" value="kinba" />
	</node>

	<!-- localize -->
	<node name="rosplan_interface_localiser" pkg="rosplan_interface_turtlebot2" type="rplocaliser" respawn="false" output="screen">
	<param name="filename" value="$(find rosplan_demos)/scripts/waypoints_floor.txt" />
	<param name="turtlebot_name" value="kinba" />
	</node>
	
	<!-- dock -->
	<include file="$(find kobuki_auto_docking)/launch/minimal.launch" />
	<node name="rosplan_interface_docker" pkg="rosplan_interface_turtlebot2" type="rpdocker" respawn="false" output="screen">
	<param name="turtlebot_name" value="kinba" />	
	</node>

	<!-- map_server -->
	<arg name="map_file" default="$(env TURTLEBOT_GAZEBO_MAP_FILE)"/>
	<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

	<!--<node name="map_server" pkg="map_server" type="map_server" args="$(find map_server)/test/map-strand-first-floor.yaml"/>
	<test test-name="map_server_test" pkg="map_server" type="rtest"/>-->
	
	<!-- talk -->
	<node name="rosplan_interface_talker" pkg="rosplan_interface_turtlebot2" type="rptalker" respawn="false" output="screen"></node>

</launch>




