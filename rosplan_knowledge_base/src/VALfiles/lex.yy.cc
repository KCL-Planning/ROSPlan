
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 34
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 * Given that the standard has decreed that size_t exists since 1989,
 * I guess we can afford to depend on it. Manoj.
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 110
#define YY_END_OF_BUFFER 111
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[728] =
    {   0,
      108,  108,  111,  110,  105,  107,  110,    1,    2,   95,
       93,   94,   96,  108,  102,  110,   99,   65,   97,  101,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,    3,    4,  104,  105,   73,  108,
      109,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  106,
      100,   98,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,   53,  104,  104,  104,  104,  104,  104,  104,
      104,  109,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  104,   52,  104,    0,    0,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,   57,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,    0,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  104,  104,    0,
      103,    0,    0,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,   58,  104,   76,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   64,   63,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   19,    0,    0,    0,  104,  104,  103,    0,    0,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   56,
      104,  104,  104,  104,  104,    0,  104,  104,  104,  104,
      104,  104,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   36,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,    0,    0,
       84,   82,  103,   45,    0,  104,  104,   32,   33,  104,
       59,   54,   55,  104,  104,  104,  104,  104,  104,   77,
        0,  104,  104,  104,  104,  104,   86,   34,    0,    0,
        0,    0,    0,    0,   61,    0,   47,    0,    0,    0,
        0,    0,    0,    0,    0,   66,   69,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   67,    0,
        7,    0,    9,    0,  104,    0,  104,  104,  104,  104,
      104,  104,  104,  104,  104,    0,  104,   60,  104,  104,

      104,  104,    0,    0,    0,    0,    0,   38,    0,    0,
        0,    0,    0,    0,    0,   15,    0,    0,    0,    0,
        0,    0,   62,    0,    0,    0,    0,    0,   35,    0,
        0,    0,    0,    0,  104,   44,  104,   79,   74,  104,
      104,   78,  104,   71,   70,   46,  104,  104,   80,   85,
      104,    0,    0,    0,    0,    0,    0,    0,   51,    0,
        0,    6,    0,    0,    0,    0,    0,    0,    0,    0,
       68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      104,  104,  104,  104,  104,  104,  104,  104,  104,    0,
       41,   22,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   24,    0,   50,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  104,  104,   92,  104,
      104,   83,   81,  104,  104,   75,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   39,    0,   23,    0,    0,    0,    0,    0,    0,
      104,  104,   91,   72,  104,  104,    0,    0,   21,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   20,    0,    0,    0,    0,    0,  104,   87,
      104,  104,   18,    0,    0,    0,    0,    0,    0,    0,
        0,   49,    0,    0,    0,    0,   40,    0,    5,    0,

        0,    0,   90,  104,  104,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   88,  104,    0,    0,    0,    0,    0,    0,    0,
        0,   48,    0,    0,   17,    0,    0,    0,    0,   89,
        0,    0,    0,    0,    0,   37,    0,    0,    0,   16,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   26,
       43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
       30,    0,    0,    0,    0,    0,   42,    0,    0,   14,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   27,    0,    0,    0,    0,
        0,    0,    0,   29,    0,   31,    0,    0,    0,    0,
       12,    0,    0,   13,   10,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,    1,   47,    1,   30,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   30,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[731] =
    {   0,
        0,   34,  539, 1773,   72, 1773,   36, 1773, 1773, 1773,
     1773,  522, 1773,   66,   83,  528,  501, 1773,  492, 1773,
      141,   68,  142,   70,  143,  147,  151,   76,  152,  177,
      158,  178,  183,  210, 1773, 1773,  214,   80, 1773,   74,
      475,  147,   67,  206,  218,  224,  124,  142,   73,   75,
      232,   89,  212,  138,  201,  211,  241,  214,  481, 1773,
     1773, 1773,    0,   78,  277,  279,  283,  296,  291,  295,
      297,  301,  307,  305,  312,  316,  323,   80,  337,  339,
      318,  343,   82,  352,  358,  373,  364,  375,  377,  381,
      385,  467,  229,  301,  304,  302,  341,  349,  352,  204,

      374,  360,  379,  377,  376,  371,  379,  395,  394,  380,
      379,  398,  394,  399,  393,  408,  417,  398,  409,  429,
      416,  416,  426,  454,  223,  458,  477,  481,  438,  479,
      485,  486,  490,  494,  498,  502,  507,  513,  514,  460,
      519,  527,  345,  532,  547,  549,  551,  555,  556,  557,
      563,  572,  577,  551, 1773,  565,  561,  562,  572,  573,
      570,  466,  577,  492,  568,  578,  585,  588,  581,  575,
      595,  592,  587,  608,  608,  610,  615,  622,  614,  607,
      602,  620,  613,  624,  629,  630,  616,  655,  661,  459,
      543,  628,  627,  636,  679,  681,  688,  694,  695,  696,

      707,  445,  708,  712,  627,  700,  714,  724,  741,  729,
      730,  745,  753,  758,  757,  762,  764,  651,  667,  663,
      672,  689,  716,  722,  741,  760,  749,  754,  747,  748,
      762,  761,  756, 1773,  768,  761,  760,  772,  763,  766,
      782,  777,  772,  787,  793,  799,  788,  803,  814,  798,
      803,  816,  803,  809,  820,  836,  837,  450,  825,  832,
      817,  843,  847,  848,  865,  873,  874,  875,  869,  885,
      894,  839,  903,  912,  892,  846,  913,  914,  905,  933,
      922,  931,  870,  870,  914,  895,  895,  912,  915,  924,
      910,  917,  929, 1773,  934,  449,  921,  937,  947,  941,

      943,  949,  945,  946,  924,  948,  958,  951,  966,  955,
      956,  968,  963,  972,  350,  966,  328, 1773,  979,  970,
      999, 1004,  311, 1773,  971,  974, 1005, 1010, 1012, 1016,
     1026, 1028, 1032, 1003,  992, 1034, 1006, 1036, 1038, 1042,
     1022, 1044, 1050, 1035, 1052, 1022, 1056,  313, 1039, 1038,
     1053, 1036, 1055, 1057, 1773, 1051, 1773, 1063, 1050, 1057,
     1069, 1053, 1063, 1069, 1074, 1773, 1773, 1063, 1083, 1103,
     1090, 1081, 1100, 1105, 1102, 1090, 1104, 1106, 1773, 1097,
     1773, 1106, 1773, 1098, 1095, 1099,  293, 1136, 1156, 1101,
     1106, 1161, 1124, 1163, 1167, 1117, 1168, 1169, 1122, 1149,

     1180, 1158, 1170, 1160, 1156, 1168, 1164,  284, 1160, 1167,
     1178, 1181, 1162, 1168, 1183, 1773, 1177,  273, 1179, 1193,
      269, 1193, 1773, 1192, 1205, 1207, 1199, 1207, 1773, 1213,
     1211, 1207, 1214, 1228, 1221, 1773, 1217, 1242, 1243, 1230,
     1230, 1249, 1221, 1251, 1262, 1773, 1270, 1224,    0, 1271,
     1236, 1239, 1246, 1247, 1255, 1249, 1255, 1263,  221,  216,
     1260, 1773, 1268, 1272, 1261, 1277, 1264,  211, 1279, 1276,
     1773, 1271, 1270, 1281, 1288, 1287, 1289, 1290, 1290, 1291,
     1284, 1294, 1291, 1298, 1313, 1335, 1307, 1323, 1323, 1313,
     1332, 1773, 1317, 1319, 1324, 1321, 1325, 1343, 1333, 1344,

     1344, 1773, 1344, 1773, 1338, 1343, 1336, 1339, 1342, 1341,
     1358, 1362, 1357, 1364, 1355,  205, 1368, 1377,    0, 1376,
     1382, 1398,    0, 1382, 1385,    0, 1373, 1384, 1378,  163,
     1394, 1395, 1389, 1398, 1401, 1395, 1406, 1404, 1394, 1392,
     1410, 1773, 1402, 1773, 1400,  157, 1401, 1407, 1416, 1415,
     1417, 1427,    0,    0, 1415, 1430, 1422,  153, 1773, 1437,
     1441,  149, 1442, 1430, 1442,  120, 1435, 1447, 1451, 1452,
     1445, 1447, 1773, 1447, 1446, 1452, 1466, 1451, 1457,    0,
     1467, 1459, 1773, 1471, 1472, 1472, 1467, 1470, 1480, 1471,
     1478, 1773, 1494, 1496, 1488, 1483, 1773, 1487, 1773, 1503,

     1499, 1503,    0, 1494, 1495, 1509, 1510, 1516, 1504, 1502,
     1509, 1511, 1508, 1508, 1516, 1513, 1515, 1532, 1532,  119,
     1539,    0, 1540, 1540, 1547, 1553, 1551, 1556, 1545, 1547,
     1558, 1773, 1552, 1548, 1773, 1561, 1548, 1559, 1557,    0,
     1570, 1573, 1558, 1576, 1569, 1564, 1573, 1585, 1586, 1773,
     1581, 1588, 1591, 1588, 1603, 1589, 1606, 1598, 1606, 1773,
     1773, 1602, 1610, 1607, 1607, 1604, 1622, 1610, 1612, 1613,
     1619, 1615, 1623, 1618, 1623, 1627, 1637, 1636, 1631, 1773,
     1773, 1642, 1643, 1649, 1647, 1652, 1773, 1645, 1646, 1773,
     1658, 1664, 1662, 1660, 1656, 1671, 1669, 1662, 1664, 1665,

     1672, 1670, 1675, 1673, 1682, 1773, 1683, 1675, 1681, 1679,
     1687, 1689, 1690, 1773, 1694, 1773, 1692, 1702, 1703, 1699,
     1773, 1703, 1705, 1773, 1773, 1773, 1773, 1770,  110,   92
    } ;

static yyconst flex_int16_t yy_def[731] =
    {   0,
      727,    1,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  728,  727,  727,  727,  727,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  727,  727,  729,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  728,  727,
      727,  727,  730,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  729,  729,  729,  727,  727,  730,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  730,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  729,  729,  727,
      727,  727,  727,  730,  729,  729,  729,  729,  729,  729,

      729,  729,  729,  729,  730,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  729,  729,  727,  727,  727,
      730,  729,  729,  729,  729,  729,  729,  729,  730,  729,
      729,  730,  729,  729,  729,  727,  729,  729,  729,  729,
      729,  729,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      729,  729,  727,  727,  727,  730,  729,  729,  729,  729,
      729,  729,  729,  730,  730,  729,  730,  729,  729,  729,
      727,  729,  729,  730,  729,  730,  729,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  730,  727,  730,  729,  729,  730,
      730,  729,  730,  729,  729,  727,  729,  729,  730,  730,

      729,  730,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  730,  727,  730,  729,  729,  730,
      730,  729,  730,  729,  729,  727,  729,  730,  730,  729,
      730,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      730,  730,  730,  730,  730,  729,  730,  730,  730,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  730,  730,  730,  730,
      730,  729,  730,  730,  730,  730,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      730,  730,  730,  730,  730,  730,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  730,  730,
      730,  730,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  730,  730,  730,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  730,  730,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  730,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,    0,  727,  727,  727
    } ;

static yyconst flex_int16_t yy_nxt[1846] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
        4,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   23,   24,   25,   22,   26,   27,   22,   22,
       22,   28,   29,   30,   31,   22,   22,   32,   33,   22,
       22,   34,   22,   22,   22,   35,   36,   21,   22,   22,
       23,   24,   25,   22,   26,   27,   22,   22,   28,   29,
       30,   31,   22,   22,   32,   33,   22,   22,   34,   22,
       22,   22,   37,   38,   39,   38,   41,   63,   40,   63,
       63,   38,   63,   38,   41,   63,   40,   63,   63,  140,
       63,   63,   63,   63,   63,   79,  110,   72,  111,   37,

       95,   39,   42,   80,   43,   44,   45,   46,   47,  114,
       48,   64,   73,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   79,  110,   72,  111,   95,  638,  591,
       42,   80,   43,   44,   45,   46,   47,  114,   48,   73,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       63,   63,   63,   63,   63,   63,   63,  108,  587,   63,
       63,   63,  584,   63,   63,   69,  574,   63,   93,   94,
       63,   65,  560,   66,  109,   70,   74,  117,   67,   68,
       75,   71,   76,   77,  108,   81,   63,   63,   78,   63,
       63,   82,   63,   69,   85,   63,   93,   94,   65,   86,

       66,  109,   70,   74,  117,   67,   68,   75,   71,   76,
       77,   87,   81,   83,  550,   78,   88,   84,   82,   63,
      505,   85,   63,   63,  118,  498,   63,   86,  161,   96,
      497,  115,   63,   97,  119,   63,   89,   90,   87,   98,
       83,   91,  100,   88,   84,   99,  123,   88,  116,  120,
      101,  105,  118,  102,  106,  112,  161,   96,  103,  115,
      104,   97,  119,  107,   89,   90,   98,  154,  121,   91,
      100,  113,   99,  123,   88,  116,  120,  101,  469,  105,
      102,  106,  466,  112,  122,  103,   63,  104,   63,   63,
      107,   63,   63,  457,  154,   63,  121,  127,  113,  128,

       63,  125,  437,   63,   63,  129,   63,   63,   63,   63,
       63,  122,  130,   63,   63,  131,   63,   63,  124,   63,
      126,   63,  403,  323,   63,   63,  132,   63,   63,  125,
       63,  155,   63,  133,  135,   63,  156,  382,  157,  134,
      130,  136,  137,  131,  139,  124,   63,  126,   63,   63,
      138,   63,   63,  132,   63,   63,  143,   63,  155,  380,
      133,   63,  135,  156,   63,  157,  134,   63,  136,  137,
       63,  142,  139,   63,  144,  145,   63,  138,  158,  141,
      159,  146,   63,  143,   63,   63,   63,   63,  160,   63,
       63,  147,  148,   63,   63,  149,  162,   63,  142,  163,

      151,  144,  164,  145,  165,  158,  141,  159,  166,  146,
      167,  168,  172,  150,  169,  160,  153,  173,  147,  152,
      148,  170,  149,  174,  162,  175,  163,  176,  151,  177,
      164,  178,  165,  181,  171,  166,  180,  167,  168,  172,
      150,  179,  169,  153,  173,  182,  152,  185,  183,  170,
      186,  174,  175,  187,  269,  176,  177,   63,  361,  178,
      181,  171,  323,   63,  180,  184,   63,   63,  179,  194,
       63,  191,  182,  188,  185,  227,  183,  186,  127,   92,
      127,  187,  127,   60,  127,  189,  190,   92,   63,  191,
      190,   63,  184,  191,   63,   63,  194,   63,   63,   63,

      205,  188,   63,   63,  192,  197,   63,   63,   62,  198,
       63,   63,  196,  189,   63,  195,   63,   61,  193,   63,
      199,  201,   63,   63,  229,   63,   63,  205,   63,  202,
       60,   63,  192,  197,   40,  200,   63,  198,  727,   63,
      196,   63,  195,  203,   63,  193,  206,  727,  199,  201,
      204,  229,  208,  258,  207,  191,   63,  202,   63,   63,
       63,   63,  200,   63,   63,   63,   63,   63,   63,   63,
      203,  211,   63,  210,  206,   63,  214,  204,  218,  213,
      208,   63,  207,  209,   63,  212,   63,  219,  222,   63,
      223,  224,  225,  226,  727,  215,  228,  231,  216,  211,

      217,  210,  220,  221,  214,  230,  218,  213,  232,  233,
      209,  234,  212,  235,  236,  219,  222,  237,  223,  224,
      225,  226,  215,  238,  228,  231,  216,  239,  217,  220,
      221,  240,  230,  241,  242,  246,  232,  233,  234,  247,
      235,  248,  236,  243,  244,  237,  245,  249,  727,  250,
      238,  251,  252,  253,  272,  239,  255,  254,  727,  240,
      259,  241,  242,  246,   63,  260,  247,   63,  248,  261,
       63,  243,  244,   63,  245,  249,  250,  727,  727,  251,
      252,  253,  272,  255,  283,  254,  257,  259,   63,  727,
       63,   63,  260,   63,  284,  727,  261,   63,  256,  286,

       63,  285,  262,   63,   63,   63,   63,   63,   63,   63,
      727,  283,   63,  263,  257,  264,   63,   63,  266,   63,
       63,   63,  284,   63,   63,  256,   63,  286,  285,  287,
      262,  273,  265,   63,  267,  271,   63,  268,   63,   63,
      263,   63,   63,  264,  276,  274,  266,  275,  727,  289,
       63,  270,  277,   63,   63,  288,  287,   63,  273,  265,
      278,  267,   63,  271,  268,   63,   63,   63,  279,   63,
       63,   63,  274,   63,   63,  275,   63,  289,  270,  290,
      277,  291,  288,  292,  293,  294,  295,  278,  281,  282,
      727,  280,  296,  297,  298,  299,  279,  300,  301,  302,

      727,  303,  304,  305,  727,  308,  290,  306,  307,  291,
      292,  293,  294,  295,  309,  281,  310,  282,  280,  296,
      297,  298,  311,  299,  300,  301,  312,  302,  303,  304,
      313,  305,  308,  314,  306,  307,  315,  316,  317,  727,
      318,  319,  309,  320,  310,   63,   63,  324,   63,   63,
      311,  325,   63,  312,  326,   63,   63,   63,  313,   63,
       63,  314,  327,  315,  316,  341,  317,  318,  319,  322,
      328,  320,  337,  321,   63,  324,  727,   63,  727,  325,
      329,  326,   63,   63,   63,   63,   63,   63,  334,  727,
      327,  335,  330,  341,   63,  727,  322,   63,  328,  337,

      321,   63,  348,   63,   63,  333,   63,  329,  349,  331,
      727,  332,   63,  336,  344,   63,  334,   63,  353,  335,
      330,   63,   63,   63,   63,   63,   63,  352,  340,  348,
      338,  346,  333,  350,   63,  349,  331,  343,  332,  339,
       63,  336,   63,   63,  354,   63,  353,  355,  357,  342,
      351,  356,  727,  358,  352,  340,  359,  360,  338,  362,
      345,  350,  370,  347,  363,  343,  364,  339,  365,  366,
      367,  354,  368,  369,  355,  357,  342,  351,  371,  356,
      358,  372,  727,  373,  359,  360,  362,  374,  345,  370,
      347,  375,  363,  376,  364,  377,  365,  366,  367,  378,

      368,  369,  379,  381,  383,  371,  384,  386,  385,  372,
      373,   63,  387,   63,   63,  374,   63,   63,  375,   63,
      376,   63,   63,  377,   63,   63,  378,  390,   63,  379,
      381,  391,  383,  384,  386,   63,  393,   63,   63,  387,
       63,   63,  388,   63,   63,   63,   63,   63,   63,  389,
       63,   63,  396,   63,   63,  390,   63,  399,  391,   63,
      402,   63,   63,  393,   63,   63,  404,  397,   63,  388,
      405,  392,  406,  727,  400,  407,  389,  408,  409,  396,
      394,  398,  395,  401,  410,  399,  412,  402,  413,  414,
      416,  411,  415,  419,  404,  397,  417,  405,  392,  418,

      406,  400,  407,  420,  421,  408,  409,  394,  398,  395,
      401,  410,  422,  424,  412,  413,  414,  416,  411,  425,
      415,  419,  426,  417,  427,  428,  418,  429,  430,  431,
      420,  432,  421,  433,  727,  434,  435,  436,  727,  440,
      423,  424,  441,  443,  727,   63,  425,  446,   63,  727,
      426,  727,  427,  428,  429,  448,  430,  431,  432,  438,
      727,  433,  434,  435,  436,   63,  440,  423,   63,  441,
       63,  443,   63,   63,  446,   63,   63,   63,   63,   63,
       63,   63,  448,  449,  442,  451,  444,  438,  439,   63,
      445,  452,   63,  453,  454,  455,  727,  456,  458,  459,

      447,  460,  461,  450,  727,  462,  463,  464,  727,  465,
      449,  467,  442,  451,  444,  439,  468,  470,  445,  452,
      453,  454,  471,  455,  456,  458,  459,  447,  472,  460,
      461,  450,  462,  463,  473,  464,  465,  474,  467,  475,
      476,  727,  477,  478,  468,  470,  479,  480,  481,  471,
      482,   63,   63,  483,   63,   63,  472,  484,   63,  485,
       63,   63,  473,   63,  474,  487,  475,  489,  476,  477,
      478,   63,  490,  479,   63,  480,  481,  482,  491,   63,
      488,  483,   63,   63,  492,  484,  485,  493,  494,  495,
      496,  486,  487,  499,  489,  500,  501,  727,  502,  490,

      503,  727,  504,  506,  510,  491,  507,  508,  509,  511,
      512,  492,  513,  514,  493,  494,  495,  515,  496,  486,
      499,  516,  517,  500,  501,  502,  518,  519,  503,  504,
      520,  506,  510,  507,  508,  509,  521,  511,  512,  523,
      513,  514,  524,  525,   63,  515,  526,   63,  516,  517,
      527,  528,  533,  518,  519,  529,  530,  520,  522,  727,
      531,  532,  534,  536,  521,  535,  523,  537,  538,  543,
      524,  525,  539,  540,  526,  541,  542,  527,  544,  528,
      533,  545,  529,  530,  546,  548,  522,  531,  532,  547,
      534,  536,  535,  549,  551,  537,  538,  543,  552,  539,

      540,  553,  541,  542,  554,  544,  555,   63,  556,  545,
       63,  557,  546,  548,  558,  559,  547,  561,  562,  564,
      549,  563,  551,  565,  727,  566,  552,  567,  568,  553,
      569,  570,  554,  571,  555,  572,  556,  573,  557,  575,
      576,  558,  559,  577,  579,  561,  562,  564,  563,  578,
      580,  565,  566,  581,  582,  567,  568,  569,  570,  583,
      585,  571,  572,  586,  573,  588,  575,  576,  589,  590,
      593,  577,  579,  592,  594,  595,  578,  596,  580,  597,
      581,  598,  582,  599,  600,  601,  583,  602,  585,  603,
      604,  586,  605,  588,  606,  589,  607,  590,  593,  608,

      592,  609,  594,  595,  596,  610,  597,  611,  598,  612,
      599,  600,  613,  601,  602,  614,  603,  615,  604,  605,
      616,  617,  606,  618,  607,  619,  621,  608,  609,  620,
      622,  623,  610,  624,  625,  611,  612,  626,  630,  613,
      627,  628,  629,  614,  631,  615,  632,  616,  617,  633,
      618,  634,  635,  619,  621,  636,  620,  622,  623,  637,
      639,  624,  625,  640,  641,  626,  630,  627,  628,  629,
      642,  631,  643,  632,  644,  645,  633,  646,  634,  635,
      647,  648,  651,  636,  649,  650,  652,  637,  639,  653,
      654,  640,  641,  655,  656,  727,  657,  658,  642,  659,

      643,  660,  644,  645,  646,  661,  662,  647,  663,  648,
      651,  649,  650,  652,  664,  665,  653,  654,  666,  727,
      667,  655,  656,  657,  668,  658,  659,  669,  660,  670,
      727,  671,  661,  672,  662,  673,  663,  674,  727,  675,
      676,  664,  677,  665,  678,  686,  666,  667,  679,  680,
      681,  682,  668,  683,  669,  684,  685,  670,  671,  687,
      688,  672,  673,  689,  691,  674,  675,  676,  690,  677,
      692,  693,  678,  686,  694,  679,  680,  681,  682,  695,
      683,  696,  684,  685,  697,  698,  687,  699,  688,  700,
      703,  689,  691,  701,  702,  690,  704,  709,  692,  693,

      705,  706,  694,  707,  708,  710,  711,  695,  696,  712,
      713,  697,  714,  698,  715,  699,  716,  700,  703,  717,
      701,  702,  718,  719,  704,  709,  720,  705,  706,  721,
      707,  708,  710,  711,  722,  723,  724,  712,  713,  714,
      725,  715,  726,  716,  727,  727,  717,  727,  727,  718,
      719,  727,  727,  720,  727,  727,  721,  727,  727,  727,
      727,  722,  723,  724,  727,  727,  727,  725,  727,  726,
       59,   59,    3,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727
    } ;

static yyconst flex_int16_t yy_chk[1846] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    5,    7,    5,   14,   22,   14,   24,
       22,   38,   24,   38,   40,   28,   40,   64,   28,   78,
       64,   83,   78,  730,   83,   28,   49,   24,   50,    2,

       43,    7,   15,   28,   15,   15,   15,   15,   15,   52,
       15,  729,   24,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   28,   49,   24,   50,   43,  620,  566,
       15,   28,   15,   15,   15,   15,   15,   52,   15,   24,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       21,   23,   25,   21,   23,   25,   26,   47,  562,   26,
       27,   29,  558,   27,   29,   23,  546,   31,   42,   42,
       31,   21,  530,   21,   48,   23,   25,   54,   21,   21,
       26,   23,   27,   27,   47,   29,   30,   32,   27,   30,
       32,   29,   33,   23,   31,   33,   42,   42,   21,   32,

       21,   48,   23,   25,   54,   21,   21,   26,   23,   27,
       27,   32,   29,   30,  516,   27,   33,   30,   29,   34,
      468,   31,   34,   37,   55,  460,   37,   32,  100,   44,
      459,   53,  125,   44,   56,  125,   34,   34,   32,   44,
       30,   37,   45,   33,   30,   44,   58,   37,   53,   56,
       45,   46,   55,   45,   46,   51,  100,   44,   45,   53,
       45,   44,   56,   46,   34,   34,   44,   93,   57,   37,
       45,   51,   44,   58,   37,   53,   56,   45,  421,   46,
       45,   46,  418,   51,   57,   45,   65,   45,   66,   65,
       46,   66,   67,  408,   93,   67,   57,   68,   51,   68,

       69,   66,  387,   69,   70,   68,   71,   70,   68,   71,
       72,   57,   69,   72,   74,   69,   73,   74,   65,   73,
       67,   75,  348,  323,   75,   76,   70,   81,   76,   66,
       81,   94,   77,   71,   73,   77,   95,  317,   96,   72,
       69,   74,   75,   69,   77,   65,   79,   67,   80,   79,
       76,   80,   82,   70,  143,   82,   81,  143,   94,  315,
       71,   84,   73,   95,   84,   96,   72,   85,   74,   75,
       85,   80,   77,   87,   82,   84,   87,   76,   97,   79,
       98,   85,   86,   81,   88,   86,   89,   88,   99,   89,
       90,   85,   86,   90,   91,   87,  101,   91,   80,  102,

       89,   82,  103,   84,  104,   97,   79,   98,  105,   85,
      106,  107,  110,   88,  108,   99,   91,  111,   85,   90,
       86,  109,   87,  112,  101,  113,  102,  114,   89,  115,
      103,  116,  104,  118,  109,  105,  117,  106,  107,  110,
       88,  116,  108,   91,  111,  119,   90,  121,  120,  109,
      122,  112,  113,  123,  202,  114,  115,  202,  296,  116,
      118,  109,  258,  124,  117,  120,  124,  126,  116,  129,
      126,  190,  119,  124,  121,  162,  120,  122,  127,   92,
      127,  123,  128,   59,  128,  126,  127,   41,  130,  127,
      128,  130,  120,  128,  131,  132,  129,  131,  132,  133,

      140,  124,  133,  134,  128,  132,  134,  135,   19,  133,
      135,  136,  131,  126,  136,  130,  137,   17,  128,  137,
      134,  136,  138,  139,  164,  138,  139,  140,  141,  137,
       16,  141,  128,  132,   12,  135,  142,  133,    3,  142,
      131,  144,  130,  138,  144,  128,  141,    0,  134,  136,
      139,  164,  144,  191,  142,  191,  145,  137,  146,  145,
      147,  146,  135,  147,  148,  149,  150,  148,  149,  150,
      138,  147,  151,  146,  141,  151,  150,  139,  154,  149,
      144,  152,  142,  145,  152,  148,  153,  156,  157,  153,
      158,  159,  160,  161,    0,  151,  163,  166,  152,  147,

      153,  146,  156,  156,  150,  165,  154,  149,  167,  168,
      145,  169,  148,  170,  171,  156,  157,  172,  158,  159,
      160,  161,  151,  173,  163,  166,  152,  174,  153,  156,
      156,  175,  165,  176,  177,  179,  167,  168,  169,  180,
      170,  181,  171,  178,  178,  172,  178,  182,    0,  183,
      173,  184,  185,  186,  205,  174,  187,  186,    0,  175,
      192,  176,  177,  179,  188,  193,  180,  188,  181,  194,
      189,  178,  178,  189,  178,  182,  183,    0,    0,  184,
      185,  186,  205,  187,  218,  186,  189,  192,  195,    0,
      196,  195,  193,  196,  219,    0,  194,  197,  188,  221,

      197,  220,  195,  198,  199,  200,  198,  199,  200,  206,
        0,  218,  206,  196,  189,  197,  201,  203,  199,  201,
      203,  204,  219,  207,  204,  188,  207,  221,  220,  222,
      195,  206,  198,  208,  200,  204,  208,  201,  210,  211,
      196,  210,  211,  197,  209,  207,  199,  208,    0,  224,
      209,  203,  210,  209,  212,  223,  222,  212,  206,  198,
      211,  200,  213,  204,  201,  213,  215,  214,  212,  215,
      214,  216,  207,  217,  216,  208,  217,  224,  203,  225,
      210,  226,  223,  227,  228,  229,  230,  211,  214,  216,
        0,  213,  231,  232,  233,  235,  212,  236,  237,  238,

        0,  239,  240,  241,    0,  243,  225,  242,  242,  226,
      227,  228,  229,  230,  244,  214,  245,  216,  213,  231,
      232,  233,  246,  235,  236,  237,  247,  238,  239,  240,
      248,  241,  243,  249,  242,  242,  250,  251,  252,    0,
      253,  254,  244,  255,  245,  256,  257,  259,  256,  257,
      246,  260,  262,  247,  261,  262,  263,  264,  248,  263,
      264,  249,  262,  250,  251,  276,  252,  253,  254,  257,
      263,  255,  272,  256,  265,  259,    0,  265,    0,  260,
      264,  261,  266,  267,  268,  266,  267,  268,  269,    0,
      262,  269,  265,  276,  270,    0,  257,  270,  263,  272,

      256,  275,  283,  271,  275,  268,  271,  264,  284,  266,
        0,  267,  273,  271,  279,  273,  269,  279,  287,  269,
      265,  274,  277,  278,  274,  277,  278,  286,  275,  283,
      273,  281,  268,  285,  281,  284,  266,  278,  267,  274,
      282,  271,  280,  282,  288,  280,  287,  289,  291,  277,
      285,  290,    0,  292,  286,  275,  293,  295,  273,  297,
      280,  285,  305,  282,  298,  278,  299,  274,  300,  301,
      302,  288,  303,  304,  289,  291,  277,  285,  306,  290,
      292,  307,    0,  308,  293,  295,  297,  309,  280,  305,
      282,  310,  298,  311,  299,  312,  300,  301,  302,  313,

      303,  304,  314,  316,  319,  306,  320,  325,  321,  307,
      308,  321,  326,  322,  327,  309,  322,  327,  310,  328,
      311,  329,  328,  312,  329,  330,  313,  334,  330,  314,
      316,  335,  319,  320,  325,  331,  337,  332,  331,  326,
      332,  333,  327,  336,  333,  338,  336,  339,  338,  330,
      339,  340,  341,  342,  340,  334,  342,  344,  335,  343,
      346,  345,  343,  337,  345,  347,  349,  342,  347,  327,
      350,  336,  351,    0,  344,  352,  330,  353,  354,  341,
      338,  343,  339,  345,  356,  344,  358,  346,  359,  360,
      362,  356,  361,  365,  349,  342,  363,  350,  336,  364,

      351,  344,  352,  368,  369,  353,  354,  338,  343,  339,
      345,  356,  370,  371,  358,  359,  360,  362,  356,  372,
      361,  365,  373,  363,  374,  375,  364,  376,  377,  378,
      368,  380,  369,  382,    0,  384,  385,  386,    0,  390,
      370,  371,  391,  393,    0,  388,  372,  396,  388,    0,
      373,    0,  374,  375,  376,  399,  377,  378,  380,  388,
        0,  382,  384,  385,  386,  389,  390,  370,  389,  391,
      392,  393,  394,  392,  396,  394,  395,  397,  398,  395,
      397,  398,  399,  400,  392,  402,  394,  388,  389,  401,
      395,  403,  401,  404,  405,  406,    0,  407,  409,  410,

      397,  411,  412,  401,    0,  413,  414,  415,    0,  417,
      400,  419,  392,  402,  394,  389,  420,  422,  395,  403,
      404,  405,  424,  406,  407,  409,  410,  397,  425,  411,
      412,  401,  413,  414,  426,  415,  417,  427,  419,  428,
      430,    0,  431,  432,  420,  422,  433,  434,  435,  424,
      437,  438,  439,  440,  438,  439,  425,  441,  442,  443,
      444,  442,  426,  444,  427,  448,  428,  451,  430,  431,
      432,  445,  452,  433,  445,  434,  435,  437,  453,  447,
      450,  440,  447,  450,  454,  441,  443,  455,  456,  457,
      458,  447,  448,  461,  451,  463,  464,    0,  465,  452,

      466,    0,  467,  469,  474,  453,  470,  472,  473,  475,
      476,  454,  477,  478,  455,  456,  457,  479,  458,  447,
      461,  480,  481,  463,  464,  465,  482,  483,  466,  467,
      484,  469,  474,  470,  472,  473,  485,  475,  476,  487,
      477,  478,  488,  488,  486,  479,  489,  486,  480,  481,
      490,  491,  497,  482,  483,  493,  494,  484,  486,    0,
      495,  496,  498,  500,  485,  499,  487,  501,  503,  509,
      488,  488,  505,  506,  489,  507,  508,  490,  510,  491,
      497,  511,  493,  494,  512,  514,  486,  495,  496,  513,
      498,  500,  499,  515,  517,  501,  503,  509,  518,  505,

      506,  520,  507,  508,  521,  510,  524,  522,  525,  511,
      522,  527,  512,  514,  528,  529,  513,  531,  532,  534,
      515,  533,  517,  535,    0,  536,  518,  537,  538,  520,
      539,  540,  521,  541,  524,  543,  525,  545,  527,  547,
      548,  528,  529,  549,  551,  531,  532,  534,  533,  550,
      552,  535,  536,  555,  556,  537,  538,  539,  540,  557,
      560,  541,  543,  561,  545,  563,  547,  548,  564,  565,
      568,  549,  551,  567,  569,  570,  550,  571,  552,  572,
      555,  574,  556,  575,  576,  577,  557,  578,  560,  579,
      581,  561,  582,  563,  584,  564,  585,  565,  568,  586,

      567,  587,  569,  570,  571,  588,  572,  589,  574,  590,
      575,  576,  591,  577,  578,  593,  579,  594,  581,  582,
      595,  596,  584,  598,  585,  600,  602,  586,  587,  601,
      604,  605,  588,  606,  607,  589,  590,  608,  612,  591,
      609,  610,  611,  593,  613,  594,  614,  595,  596,  615,
      598,  616,  617,  600,  602,  618,  601,  604,  605,  619,
      621,  606,  607,  623,  624,  608,  612,  609,  610,  611,
      625,  613,  626,  614,  627,  628,  615,  629,  616,  617,
      630,  631,  636,  618,  633,  634,  637,  619,  621,  638,
      639,  623,  624,  641,  642,    0,  643,  644,  625,  645,

      626,  646,  627,  628,  629,  647,  648,  630,  649,  631,
      636,  633,  634,  637,  651,  652,  638,  639,  653,    0,
      654,  641,  642,  643,  655,  644,  645,  656,  646,  657,
        0,  658,  647,  659,  648,  662,  649,  663,    0,  664,
      665,  651,  666,  652,  667,  675,  653,  654,  668,  669,
      670,  671,  655,  672,  656,  673,  674,  657,  658,  676,
      677,  659,  662,  678,  682,  663,  664,  665,  679,  666,
      683,  684,  667,  675,  685,  668,  669,  670,  671,  686,
      672,  688,  673,  674,  689,  691,  676,  692,  677,  693,
      696,  678,  682,  694,  695,  679,  697,  702,  683,  684,

      698,  699,  685,  700,  701,  703,  704,  686,  688,  705,
      707,  689,  708,  691,  709,  692,  710,  693,  696,  711,
      694,  695,  712,  713,  697,  702,  715,  698,  699,  717,
      700,  701,  703,  704,  718,  719,  720,  705,  707,  708,
      722,  709,  723,  710,    0,    0,  711,    0,    0,  712,
      713,    0,    0,  715,    0,    0,  717,    0,    0,    0,
        0,  718,  719,  720,    0,    0,    0,  722,    0,  723,
      728,  728,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.lex"
#line 2 "pddl+.lex"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  using namespace VAL1_2;
extern "C" int yywrap();

#line 1070 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "pddl+.lex"

#line 1175 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 728 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1773 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "pddl+.lex"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "pddl+.lex"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "pddl+.lex"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "pddl+.lex"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "pddl+.lex"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "pddl+.lex"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "pddl+.lex"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "pddl+.lex"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "pddl+.lex"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "pddl+.lex"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "pddl+.lex"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "pddl+.lex"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "pddl+.lex"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "pddl+.lex"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "pddl+.lex"
{return NUMERICFLUENTS;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "pddl+.lex"
{return OBJECTFLUENTS;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "pddl+.lex"
{return ACTIONCOSTS;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "pddl+.lex"
{return PREFERENCES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "pddl+.lex"
{return CONSTRAINTS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "pddl+.lex"
{return CONSTANTS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "pddl+.lex"
{return PREDS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "pddl+.lex"
{return FUNCTIONS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "pddl+.lex"
{return TYPES;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "pddl+.lex"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "pddl+.lex"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "pddl+.lex"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "pddl+.lex"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "pddl+.lex"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "pddl+.lex"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "pddl+.lex"
{return DEFINE;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "pddl+.lex"
{return PDDLDOMAIN;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "pddl+.lex"
{return ACTION;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "pddl+.lex"
{return PROCESS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "pddl+.lex"
{return EVENT;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "pddl+.lex"
{return DURATIVE_ACTION;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "pddl+.lex"
{return DERIVED;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "pddl+.lex"
{return ARGS;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "pddl+.lex"
{return PRE;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "pddl+.lex"
{return CONDITION;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "pddl+.lex"
{return START_PRE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "pddl+.lex"
{return END_PRE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "pddl+.lex"
{return AT_START;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "pddl+.lex"
{return AT_END;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "pddl+.lex"
{return OVER_ALL;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "pddl+.lex"
{return EFFECTS;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "pddl+.lex"
{return INITIAL_EFFECT;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "pddl+.lex"
{return FINAL_EFFECT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "pddl+.lex"
{return INVARIANT;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "pddl+.lex"
{return DURATION;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "pddl+.lex"
{return AND;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "pddl+.lex"
{return OR;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "pddl+.lex"
{return EXISTS;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "pddl+.lex"
{return FORALL;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "pddl+.lex"
{return IMPLY;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "pddl+.lex"
{return NOT;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "pddl+.lex"
{return WHEN;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "pddl+.lex"
{return EITHER;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "pddl+.lex"
{return PROBLEM;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "pddl+.lex"
{return FORDOMAIN;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "pddl+.lex"
{return OBJECTS;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "pddl+.lex"
{return INITIALLY;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "pddl+.lex"
{return GOALS;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "pddl+.lex"
{return EQ;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "pddl+.lex"
{return LENGTH;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "pddl+.lex"
{return SERIAL;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "pddl+.lex"
{return PARALLEL;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "pddl+.lex"
{return METRIC;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "pddl+.lex"
{return MINIMIZE;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "pddl+.lex"
{return MAXIMIZE;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "pddl+.lex"
{return ISVIOLATED;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "pddl+.lex"
{return HASHT;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "pddl+.lex"
{return DURATION_VAR;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "pddl+.lex"
{return TOTAL_TIME;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "pddl+.lex"
{return NUMBER;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "pddl+.lex"
{return INCREASE;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "pddl+.lex"
{return DECREASE;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "pddl+.lex"
{return SCALE_UP;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "pddl+.lex"
{return SCALE_DOWN;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "pddl+.lex"
{return ASSIGN;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "pddl+.lex"
{return PREFERENCE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "pddl+.lex"
{return ALWAYS;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "pddl+.lex"
{return SOMETIME;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "pddl+.lex"
{return WITHIN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "pddl+.lex"
{return ATMOSTONCE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "pddl+.lex"
{return SOMETIMEAFTER;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "pddl+.lex"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "pddl+.lex"
{return ALWAYSWITHIN;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "pddl+.lex"
{return HOLDDURING;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "pddl+.lex"
{return HOLDAFTER;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "pddl+.lex"
{return PLUS;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "pddl+.lex"
{return HYPHEN;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "pddl+.lex"
{return MUL;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "pddl+.lex"
{return DIV;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "pddl+.lex"
{return GREATER;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "pddl+.lex"
{return GREATEQ;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "pddl+.lex"
{return LESS;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "pddl+.lex"
{return LESSEQ;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 127 "pddl+.lex"
{return Q;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 128 "pddl+.lex"
{return COLON;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 130 "pddl+.lex"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval.fval = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 140 "pddl+.lex"
{unsigned int i; 
          yylval.cp = new char[strlen(yytext)+1];
          strcpy(yylval.cp,yytext);
	  for(i = 0;i<strlen(yylval.cp);i++)
	      yylval.cp[i] = tolower(yylval.cp[i]);
	  // If symbol is registered as a function symbol,
	  // return token FUNCTION_SYMBOL else return NAME
	  //cout << yytext << " " << line_no << "\n";
	  if (current_analysis->func_tab.symbol_probe(yylval.cp) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 153 "pddl+.lex"
;
	YY_BREAK
case 106:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 154 "pddl+.lex"
;
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 155 "pddl+.lex"
{line_no++;};
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 157 "pddl+.lex"
{yylval.ival = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 158 "pddl+.lex"
{yylval.fval = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 160 "pddl+.lex"
ECHO;
	YY_BREAK
#line 1831 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 728 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 728 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 727);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 160 "pddl+.lex"




extern "C++" {
  int yyFlexLexer::yywrap()
{
	return 1;
};
};


